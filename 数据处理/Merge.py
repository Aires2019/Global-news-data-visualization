import pandas as pd

UrlPath = './totaldata/202201/export/list.txt'
df_url = pd.read_csv(UrlPath, header=None)
num = 0
csv = []

for index_url, row_url in df_url.iterrows():
    print("url=========",row_url[0])
    Url = "./totaldata/202201/export/"+row_url[0]
    
    df = pd.read_table(Url, engine='python')
    df.columns = [
            'GLOBALEVENTID',
            'SQLDATE',
            'MonthYear',
            'Year',
            'FractionDate',
            'Actor1Code',
            'Actor1Name',
            'Actor1CountryCode',
            'Actor1KnownGroupCode',
            'Actor1EthnicCode',
            'Actor1Religion1Code',
            'Actor1Religion2Code',
            'Actor1Type1Code',
            'Actor1Type2Code',
            'Actor1Type3Code',
            'Actor2Code',
            'Actor2Name',
            'Actor2CountryCode',
            'Actor2KnownGroupCode',
            'Actor2EthnicCode',
            'Actor2Religion1Code',
            'Actor2Religion2Code',
            'Actor2Type1Code',
            'Actor2Type2Code',
            'Actor2Type3Code',
            'IsRootEvent',
            'EventCode',
            'EventBaseCode',
            'EventRootCode',
            'QuadClass',
            'GoldsteinScale',
            'NumMentions',
            'NumSources',
            'NumArticles',
            'AvgTone',
            'Actor1Geo_Type',
            'Actor1Geo_FullName',
            'Actor1Geo_CountryCode',
            'Actor1Geo_ADM1Code',
            'Actor1Geo_ADM2Code',
            'Actor1Geo_Lat',
            'Actor1Geo_Long',
            'Actor1Geo_FeatureID',
            'Actor2Geo_Type',
            'Actor2Geo_FullName',
            'Actor2Geo_CountryCode',
            'Actor2Geo_ADM1Code',
            'Actor2Geo_ADM2Code',
            'Actor2Geo_Lat',
            'Actor2Geo_Long',
            'Actor2Geo_FeatureID',
            'ActionGeo_Type',
            'ActionGeo_FullName',
            'ActionGeo_CountryCode',  #国家缩写
            'ActionGeo_ADM1Code',
            'ActionGeo_ADM2Code',
            'ActionGeo_Lat',
            'ActionGeo_Long',
            'ActionGeo_FeatureID',
            'DATEADDED',
            'SOURCEURL',
        ]
    pd.set_option('display.max_columns', None)

    for index, row in df.iterrows():
        url = str(row['SOURCEURL'])
        url.lower()
        da = {
                "GLOBALEVENTID": row['GLOBALEVENTID'],
                "SQLDATE": row['SQLDATE'],
                "MonthYear": row['MonthYear'],
                "Year": row['Year'],
                "FractionDate": row['FractionDate'],
                "Actor1Code": row['Actor1Code'],
                "Actor1Name": row['Actor1Name'],
                "Actor1CountryCode": row['Actor1CountryCode'],
                "Actor1KnownGroupCode": row['Actor1KnownGroupCode'],
                "Actor1EthnicCode": row['Actor1EthnicCode'],
                "Actor1Religion1Code": row['Actor1Religion1Code'],
                "Actor1Religion2Code": row['Actor1Religion2Code'],
                "Actor1Type1Code": row['Actor1Type1Code'],
                "Actor1Type2Code": row['Actor1Type2Code'],
                "Actor1Type3Code": row['Actor1Type3Code'],
                "Actor2Code": row['Actor2Code'],
                "Actor2Name": row['Actor2Name'],
                "Actor2CountryCode": row['Actor2CountryCode'],
                "Actor2KnownGroupCode": row['Actor2KnownGroupCode'],
                "Actor2EthnicCode": row['Actor2EthnicCode'],
                "Actor2Religion1Code": row['Actor2Religion1Code'],
                "Actor2Religion2Code": row['Actor2Religion2Code'],
                "Actor2Type1Code": row['Actor2Type1Code'],
                "Actor2Type2Code": row['Actor2Type2Code'],
                "Actor2Type3Code": row['Actor2Type3Code'],
                "IsRootEvent": row['IsRootEvent'],
                "EventCode": row['EventCode'],
                "EventBaseCode": row['EventBaseCode'],
                "EventRootCode": row['EventRootCode'],
                "QuadClass": row['QuadClass'],
                "GoldsteinScale": row['GoldsteinScale'],
                "NumMentions": row['NumMentions'],
                "NumSources": row['NumSources'],
                "NumArticles": row['NumArticles'],
                "AvgTone": row['AvgTone'],
                "Actor1Geo_Type": row['Actor1Geo_Type'],
                "Actor1Geo_FullName": row['Actor1Geo_FullName'],
                "Actor1Geo_CountryCode": row['Actor1Geo_CountryCode'],
                "Actor1Geo_ADM1Code": row['Actor1Geo_ADM1Code'],
                "Actor1Geo_ADM2Code": row['Actor1Geo_ADM2Code'],
                "Actor1Geo_Lat": row['Actor1Geo_Lat'],
                "Actor1Geo_Long": row['Actor1Geo_Long'],
                "Actor1Geo_FeatureID": row['Actor1Geo_FeatureID'],
                "Actor2Geo_Type": row['Actor2Geo_Type'],
                "Actor2Geo_FullName": row['Actor2Geo_FullName'],
                "Actor2Geo_CountryCode": row['Actor2Geo_CountryCode'],
                "Actor2Geo_ADM1Code": row['Actor2Geo_ADM1Code'],
                "Actor2Geo_ADM2Code": row['Actor2Geo_ADM2Code'],
                "Actor2Geo_Lat": row['Actor2Geo_Lat'],
                "Actor2Geo_Long": row['Actor2Geo_Long'],
                "Actor2Geo_FeatureID": row['Actor2Geo_FeatureID'],
                "ActionGeo_Type": row['ActionGeo_Type'],
                "ActionGeo_FullName": row['ActionGeo_FullName'],
                "ActionGeo_CountryCode": row['ActionGeo_CountryCode'],
                "ActionGeo_ADM1Code": row['ActionGeo_ADM1Code'],
                "ActionGeo_ADM2Code": row['ActionGeo_ADM2Code'],
                "ActionGeo_Lat": row['ActionGeo_Lat'],
                "ActionGeo_Long": row['ActionGeo_Long'],
                "ActionGeo_FeatureID": row['ActionGeo_FeatureID'],
                "DATEADDED": row['DATEADDED'],
                "SOURCEURL": row['SOURCEURL'],
    }
        csv.append(da)

        df1 = pd.DataFrame(data=da, columns=[
                "GLOBALEVENTID",
                "SQLDATE",
                "MonthYear",
                "Year",
                "FractionDate",
                "Actor1Code",
                "Actor1Name",
                "Actor1CountryCode",
                "Actor1KnownGroupCode",
                "Actor1EthnicCode",
                "Actor1Religion1Code",
                "Actor1Religion2Code",
                "Actor1Type1Code",
                "Actor1Type2Code",
                "Actor1Type3Code",
                "Actor2Code",
                "Actor2Name",
                "Actor2CountryCode",
                "Actor2KnownGroupCode",
                "Actor2EthnicCode",
                "Actor2Religion1Code",
                "Actor2Religion2Code",
                "Actor2Type1Code",
                "Actor2Type2Code",
                "Actor2Type3Code",
                "IsRootEvent",
                "EventCode",
                "EventBaseCode",
                "EventRootCode",
                "QuadClass",
                "GoldsteinScale",
                "NumMentions",
                "NumSources",
                "NumArticles",
                "AvgTone",
                "Actor1Geo_Type",
                "Actor1Geo_FullName",
                "Actor1Geo_CountryCode",
                "Actor1Geo_ADM1Code",
                "Actor1Geo_ADM2Code",
                "Actor1Geo_Lat",
                "Actor1Geo_Long",
                "Actor1Geo_FeatureID",
                "Actor2Geo_Type",
                "Actor2Geo_FullName",
                "Actor2Geo_CountryCode",
                "Actor2Geo_ADM1Code",
                "Actor2Geo_ADM2Code",
                "Actor2Geo_Lat",
                "Actor2Geo_Long",
                "Actor2Geo_FeatureID",
                "ActionGeo_Type",
                "ActionGeo_FullName",
                "ActionGeo_CountryCode",
                "ActionGeo_ADM1Code",
                "ActionGeo_ADM2Code",
                "ActionGeo_Lat",
                "ActionGeo_Long",
                "ActionGeo_FeatureID",
                "DATEADDED",
                "SOURCEURL"], index=[num])
        # df1 = pd.DataFrame(data=csv, columns=["id", "DATE", "country_1", "country_2", "ActionGeo_CountryCode", "QuadClass", "url", "content"])
        df1.to_csv("202201_export.csv", mode='a', index=False, header=None)